<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:context="http://www.springframework.org/schema/context" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd">
    <http:listener-config name="httpListenerConfig" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration"/>
    <apikit:config name="apiConfig" raml="api.raml" consoleEnabled="false" doc:name="Router"/>
    <context:property-placeholder location="api.properties" />
    <http:request-config name="API_AI_HTTP_Request_Configuration" protocol="HTTPS" host="api.api.ai" port="443" basePath="/v1" doc:name="HTTP Request Configuration"/>
    <http:request-config name="IFTTT_HTTP_Request_Configuration" protocol="HTTPS" host="maker.ifttt.com" port="443" doc:name="HTTP Request Configuration"/>
    <queued-asynchronous-processing-strategy name="Queued_Asynchronous_Processing_Strategy" maxThreads="1" minThreads="1" poolExhaustedAction="WAIT" threadWaitTimeout="1000" queueTimeout="1000" doc:name="Queued Asynchronous Processing Strategy"/>
    <flow name="api-main">
        <http:listener config-ref="httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="apiConfig" doc:name="APIkit Router"/>
        <exception-strategy ref="apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="api-console">
        <http:listener config-ref="httpListenerConfig" path="/console/*" doc:name="HTTP"/>
        <apikit:console config-ref="apiConfig" doc:name="APIkit Console"/>
    </flow>
    <flow name="post:/smsagent/query:application/json:apiConfig" processingStrategy="synchronous">
        <flow-ref name="requestPreProcessing" doc:name="requestPreProcessing"/>
        <foreach doc:name="For Each">
            <enricher source="#[payload]" target="#[flowVars.finalResponse]" doc:name="Message Enricher">
                <http:request config-ref="API_AI_HTTP_Request_Configuration" path="/query" method="POST" doc:name="query api.ai">
                    <http:request-builder>
                        <http:query-param paramName="v" value="20150910"/>
                        <http:header headerName="Authorization" value="Bearer #[flowVars.apiAiToken]"/>
                        <http:header headerName="Content-type" value="application/json"/>
                    </http:request-builder>
                </http:request>
            </enricher>
        </foreach>
        <set-payload value="#[flowVars.finalResponse]" doc:name="Set Last Response from api.ai"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <enricher source="#[payload]" target="#[flowVars.iftttMakerResponse]" doc:name="Trigger IFTTT">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="{ &quot;value1&quot;: &quot;#[payload.result.fulfillment.speech]&quot;, &quot;value2&quot;:&quot;#[flowVars.fromNumber]&quot;}" doc:name="Set IFTTT trigger payload"/>
                <http:request config-ref="IFTTT_HTTP_Request_Configuration" path="/trigger/#[flowVars.iftttMakerTrigger.eventName]/with/key/#[flowVars.iftttMakerTrigger.key]" method="POST" doc:name="Trigger IFTTT Notification">
                    <http:request-builder>
                        <http:header headerName="Content-Type" value="application/json"/>
                    </http:request-builder>
                </http:request>
            </processor-chain>
        </enricher>
        <set-payload value="{ &quot;answer&quot;: &quot;#[payload.result.fulfillment.speech]&quot; }" doc:name="Set JSON response"/>
    </flow>
    <sub-flow name="requestPreProcessing">
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="apiAiToken" value="#[payload.apiAiToken]" doc:name="Set ApiAiToken"/>
        <set-variable variableName="iftttMakerTrigger" value="#[payload.iftttMakerTrigger]" doc:name="Set IftttMakerTrigger"/>
        <set-variable variableName="fromNumber" value="#[payload.sms.fromNumber]" doc:name="Set fromNumber"/>
        <scripting:transformer doc:name="Convert sms text to list of JSON payloads with 1 sentence only">
            <scripting:script engine="Groovy"><![CDATA[
            import java.text.BreakIterator
            
            def String createApiAiRequest(String text) {
	            def requestBuilder = new groovy.json.JsonBuilder()		
				requestBuilder {
								query ([
									text
								])
								lang "en"
								sessionId flowVars.fromNumber
							}		
	
	
				return requestBuilder.toString()
            }
            
            BreakIterator boundary = BreakIterator.getSentenceInstance(Locale.US)
			boundary.setText(payload.sms.text);		
			
			List apiAiJsonRequests = new ArrayList()
			
			int start = boundary.first()
			int end = boundary.next()
			while (end != BreakIterator.DONE) { 
				 apiAiJsonRequests.add(
				 						createApiAiRequest(payload.sms.text.substring(start,end))
				 					  )
				 start = end
				 end = boundary.next()
			}
            
            return apiAiJsonRequests           
            ]]></scripting:script>
        </scripting:transformer>
    </sub-flow>
    <apikit:mapping-exception-strategy name="apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
